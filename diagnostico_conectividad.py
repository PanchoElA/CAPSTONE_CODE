#!/usr/bin/env python3
"""
üîß DIAGN√ìSTICO CONECTIVIDAD REP
Diagnostica problemas de red entre Scanner App y servidor
"""

import requests
import socket
import subprocess
import time
import json
from datetime import datetime

def check_network_basics():
    """Verifica conectividad b√°sica de red"""
    print("üåê VERIFICANDO CONECTIVIDAD B√ÅSICA:")
    print("=" * 50)
    
    # Verificar conectividad local
    try:
        # Verificar que el servidor local responde
        response = requests.get("http://localhost:5000", timeout=5)
        print("‚úÖ Servidor local (localhost:5000) - ACCESIBLE")
    except Exception as e:
        print(f"‚ùå Servidor local (localhost:5000) - ERROR: {str(e)}")
    
    # Verificar IP espec√≠fica
    try:
        response = requests.get("http://192.168.5.53:5000", timeout=5)
        print("‚úÖ Servidor IP (192.168.5.53:5000) - ACCESIBLE")
    except Exception as e:
        print(f"‚ùå Servidor IP (192.168.5.53:5000) - ERROR: {str(e)}")

def check_port_connectivity():
    """Verifica que el puerto 5000 est√© abierto"""
    print(f"\nüîå VERIFICANDO PUERTO 5000:")
    print("=" * 50)
    
    hosts = ["localhost", "192.168.5.53"]
    
    for host in hosts:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((host, 5000))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ Puerto 5000 abierto en {host}")
            else:
                print(f"‚ùå Puerto 5000 cerrado en {host}")
        except Exception as e:
            print(f"‚ùå Error verificando {host}:5000 - {str(e)}")

def check_firewall():
    """Verifica configuraci√≥n del firewall"""
    print(f"\nüõ°Ô∏è VERIFICANDO FIREWALL:")
    print("=" * 50)
    
    try:
        # Verificar reglas de firewall para puerto 5000
        result = subprocess.run(
            ["netsh", "advfirewall", "firewall", "show", "rule", "name=all"],
            capture_output=True, text=True, timeout=10
        )
        
        if "5000" in result.stdout:
            print("‚úÖ Reglas de firewall encontradas para puerto 5000")
        else:
            print("‚ö†Ô∏è No se encontraron reglas espec√≠ficas para puerto 5000")
            
    except Exception as e:
        print(f"‚ùå Error verificando firewall: {str(e)}")
    
    # Sugerir comando para abrir puerto
    print("\nüí° Para abrir puerto 5000 en firewall:")
    print('netsh advfirewall firewall add rule name="REP Server" dir=in action=allow protocol=TCP localport=5000')

def check_server_endpoints(server_url):
    """Verifica que los endpoints del servidor funcionen"""
    print(f"\nüì° VERIFICANDO ENDPOINTS DEL SERVIDOR:")
    print("=" * 50)
    
    endpoints = [
        ("/", "GET", None, "P√°gina principal"),
        ("/stats", "GET", None, "Estad√≠sticas"),
        ("/retorno_rep", "POST", {
            "qr_id": "TEST:123456789ABC",
            "estado_retorno": "BUENO",
            "cliente_profile": "TEST_CONNECTIVITY"
        }, "Endpoint REP")
    ]
    
    for endpoint, method, data, description in endpoints:
        try:
            url = f"{server_url}{endpoint}"
            
            if method == "GET":
                response = requests.get(url, timeout=10)
            else:
                response = requests.post(url, json=data, timeout=10)
            
            print(f"‚úÖ {description} ({endpoint}) - C√≥digo: {response.status_code}")
            
        except requests.exceptions.ConnectRefused:
            print(f"‚ùå {description} - CONEXI√ìN RECHAZADA")
        except requests.exceptions.Timeout:
            print(f"‚è∞ {description} - TIMEOUT")
        except Exception as e:
            print(f"‚ùå {description} - ERROR: {str(e)}")

def test_android_simulation(server_url):
    """Simula una petici√≥n como la har√≠a Android"""
    print(f"\nüì± SIMULANDO PETICI√ìN ANDROID:")
    print("=" * 50)
    
    try:
        # Simular exactamente lo que env√≠a Android
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'okhttp/4.x (Android simulation)'
        }
        
        payload = {
            "qr_id": "CODELPA:6C231EF1C127",  # QR real de la BD
            "estado_retorno": "BUENO",
            "tienda_retorno": "MUNDO_PINTURA_CENTRAL",
            "cliente_profile": "ANDROID_TEST",
            "evidencia": "SIMULACION_ANDROID"
        }
        
        print(f"üì§ Enviando a: {server_url}/retorno_rep")
        print(f"üìù Headers: {headers}")
        print(f"üì¶ Payload: {json.dumps(payload, indent=2)}")
        
        response = requests.post(
            f"{server_url}/retorno_rep",
            json=payload,
            headers=headers,
            timeout=15
        )
        
        print(f"\nüìä RESPUESTA:")
        print(f"   C√≥digo: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        if response.text:
            try:
                result = response.json()
                print(f"   JSON: {json.dumps(result, indent=2)}")
            except:
                print(f"   Texto: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ SIMULACI√ìN ANDROID EXITOSA")
        else:
            print("‚ùå SIMULACI√ìN ANDROID FALL√ì")
            
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n Android: {str(e)}")

def check_wifi_connectivity():
    """Verifica configuraci√≥n de WiFi"""
    print(f"\nüì∂ VERIFICANDO CONECTIVIDAD WIFI:")
    print("=" * 50)
    
    try:
        # Obtener configuraci√≥n de red
        result = subprocess.run(
            ["ipconfig"], capture_output=True, text=True, timeout=10
        )
        
        if "192.168.5." in result.stdout:
            print("‚úÖ PC est√° en red 192.168.5.x")
        else:
            print("‚ö†Ô∏è PC podr√≠a no estar en la misma red que Android")
            
        # Mostrar IPs activas
        lines = result.stdout.split('\n')
        for line in lines:
            if "IPv4" in line:
                ip = line.split(':')[-1].strip()
                print(f"   üìç IP del PC: {ip}")
                
    except Exception as e:
        print(f"‚ùå Error verificando WiFi: {str(e)}")

def main():
    """Funci√≥n principal"""
    print("üîß DIAGN√ìSTICO CONECTIVIDAD REP - SISTEMA")
    print("üïê", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("=" * 60)
    
    # Verificar conectividad b√°sica
    check_network_basics()
    
    # Verificar puerto
    check_port_connectivity()
    
    # Verificar firewall
    check_firewall()
    
    # Verificar WiFi
    check_wifi_connectivity()
    
    # Determinar servidor a usar
    server_url = None
    for url in ["http://192.168.5.53:5000", "http://localhost:5000"]:
        try:
            response = requests.get(url, timeout=3)
            if response.status_code == 200:
                server_url = url
                break
        except:
            continue
    
    if server_url:
        print(f"\nüéØ USANDO SERVIDOR: {server_url}")
        
        # Verificar endpoints
        check_server_endpoints(server_url)
        
        # Simular Android
        test_android_simulation(server_url)
    else:
        print("\n‚ùå NO SE ENCONTR√ì SERVIDOR FUNCIONANDO")
    
    # Resumen y recomendaciones
    print("\n" + "=" * 60)
    print("üèÅ RESUMEN Y RECOMENDACIONES:")
    print("=" * 60)
    
    print("üí° PARA SOLUCIONAR 'rep_network_error':")
    print("   1. Verificar que el servidor REP est√© ejecut√°ndose")
    print("   2. Confirmar que Android y PC est√°n en misma WiFi")
    print("   3. Abrir puerto 5000 en firewall si est√° bloqueado")
    print("   4. Verificar IP 192.168.5.53 sea accesible desde Android")
    print("   5. Actualizar configuraci√≥n en Scanner App si es necesario")
    
    print("\nüîß COMANDOS √öTILES:")
    print("   ‚Ä¢ Iniciar servidor: .\\INICIAR_SISTEMA_COMPLETO.bat")
    print("   ‚Ä¢ Verificar firewall: netsh advfirewall firewall show rule name=all")
    print("   ‚Ä¢ Ver configuraci√≥n red: ipconfig")

if __name__ == "__main__":
    main()