#!/usr/bin/env python3
"""
Diagn√≥stico espec√≠fico para Scanner App con permisos corregidos
Determinar por qu√© persiste rep_network_error despu√©s de recompilaci√≥n
"""

import requests
import json
from datetime import datetime

def test_from_android_perspective():
    """Simular exactamente lo que hace el Scanner App"""
    server_url = "http://192.168.5.53:5000"
    
    print("üîç DIAGN√ìSTICO SCANNER APP - PERSPECTIVA ANDROID")
    print("=" * 60)
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Test b√°sico de conectividad (lo que Chrome hace exitosamente)
    print("\n1Ô∏è‚É£ TEST CONECTIVIDAD B√ÅSICA (Chrome funciona):")
    try:
        response = requests.get(f"{server_url}/", timeout=5)
        print(f"   ‚úÖ GET / ‚Üí Status: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error b√°sico: {e}")
        return False
    
    # 2. Test endpoint espec√≠fico de sincronizaci√≥n
    print("\n2Ô∏è‚É£ TEST ENDPOINT SINCRONIZACI√ìN:")
    try:
        response = requests.get(f"{server_url}/cliente_retornos/default", timeout=10)
        print(f"   üìä GET /cliente_retornos/default ‚Üí Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            points = data.get('profile', {}).get('points', 0)
            print(f"   ‚≠ê Puntos en servidor: {points}")
        else:
            print(f"   ‚ö†Ô∏è Response: {response.text[:100]}")
    except Exception as e:
        print(f"   ‚ùå Error sincronizaci√≥n: {e}")
    
    # 3. Test POST retorno_rep (lo que falla en Scanner App)
    print("\n3Ô∏è‚É£ TEST RETORNO_REP (LO QUE HACE SCANNER APP):")
    
    # Generar QR nuevo
    qr_payload = {
        "tipo_qr": "CODELPA",
        "marca_envase": "Codelpa", 
        "origen": "ANDROID_DIAGNOSTIC",
        "peso_envase_kg": 1.0
    }
    
    try:
        qr_response = requests.post(f"{server_url}/generate_qr", json=qr_payload, timeout=10)
        if qr_response.status_code in [200, 201]:
            test_qr = qr_response.json()["qr_id"]
            print(f"   üì± QR generado: {test_qr}")
            
            # Simular EXACTAMENTE el payload del Scanner App
            scan_payload = {
                "qr_id": test_qr,
                "estado_retorno": "BUENO", 
                "tienda_retorno": "MUNDO_PINTURA_CENTRAL",
                "cliente_profile": "default",
                "evidencia": "INSPECCION_VISUAL"
            }
            
            # Test con diferentes configuraciones de headers
            headers_tests = [
                {"Content-Type": "application/json"},
                {"Content-Type": "application/json", "User-Agent": "Android-App"},
                {"Content-Type": "application/json; charset=utf-8"},
                {}  # Sin headers
            ]
            
            for i, headers in enumerate(headers_tests, 1):
                try:
                    print(f"\n   üß™ Test {i} - Headers: {headers}")
                    scan_response = requests.post(
                        f"{server_url}/retorno_rep",
                        json=scan_payload,
                        headers=headers,
                        timeout=30
                    )
                    
                    print(f"      üì§ Status: {scan_response.status_code}")
                    
                    if scan_response.status_code == 200:
                        result = scan_response.json()
                        puntos = result.get('puntos_otorgados', 0)
                        print(f"      ‚úÖ √âXITO: {puntos} puntos otorgados")
                        print(f"      üéØ Scanner App DEBER√çA funcionar con estos headers")
                        return True
                    elif scan_response.status_code == 409:
                        print(f"      ‚ö†Ô∏è QR ya usado (normal)")
                        break
                    else:
                        print(f"      ‚ùå Error: {scan_response.text[:100]}")
                        
                except Exception as e:
                    print(f"      ‚ùå Error request: {e}")
                    
        else:
            print(f"   ‚ùå No se pudo generar QR test: {qr_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Error general: {e}")
    
    return False

def analyze_possible_causes():
    """Analizar causas posibles del problema persistente"""
    print("\n4Ô∏è‚É£ AN√ÅLISIS CAUSAS POSIBLES:")
    print("=" * 40)
    
    causes = [
        ("üîß APK no recompilado correctamente", [
            "‚Ä¢ Cach√© de Android no limpiado",
            "‚Ä¢ APK anterior a√∫n instalado",
            "‚Ä¢ Recompilaci√≥n parcial sin permisos"
        ]),
        ("üåê Problema de configuraci√≥n de red", [
            "‚Ä¢ URL hardcodeada incorrecta en app",
            "‚Ä¢ Timeout muy corto en OkHttp",
            "‚Ä¢ User-Agent bloqueado por servidor"
        ]),
        ("üì± Problema espec√≠fico de Android", [
            "‚Ä¢ Firewall de Android bloqueando app",
            "‚Ä¢ Configuraci√≥n de WiFi con restricciones",
            "‚Ä¢ Permisos no aplicados correctamente"
        ]),
        ("üîç Problema de c√≥digo", [
            "‚Ä¢ Error en PointsManager.kt no detectado",
            "‚Ä¢ Exception silenciosa en try/catch",
            "‚Ä¢ URL SERVER_URL incorrecta"
        ])
    ]
    
    for cause, details in causes:
        print(f"\n{cause}:")
        for detail in details:
            print(f"   {detail}")

def provide_immediate_solutions():
    """Proporcionar soluciones inmediatas"""
    print("\n5Ô∏è‚É£ SOLUCIONES INMEDIATAS:")
    print("=" * 40)
    
    print("\nüéØ OPCI√ìN A: Verificaci√≥n de URL en Scanner App")
    print("   1. Abrir Scanner App")
    print("   2. Ir a Configuraci√≥n/Settings")
    print("   3. Verificar URL: http://192.168.5.53:5000")
    print("   4. Asegurar que NO tiene barra final (/)")
    
    print("\nüéØ OPCI√ìN B: Limpiar datos de la App")
    print("   1. Android: Configuraci√≥n ‚Üí Apps ‚Üí QRPoints")
    print("   2. Almacenamiento ‚Üí Borrar datos")
    print("   3. Reinstalar APK recompilado")
    print("   4. Configurar URL desde cero")
    
    print("\nüéØ OPCI√ìN C: Verificar PointsManager.kt")
    print("   1. Confirmar SERVER_URL = 'http://192.168.5.53:5000'")
    print("   2. Sin espacios, sin barra final")
    print("   3. Timeout m√≠nimo 30 segundos")
    
    print("\nüéØ OPCI√ìN D: Test desde dispositivo Android")
    print("   1. Abrir Chrome en Android")
    print("   2. Ir a: http://192.168.5.53:5000")
    print("   3. Si funciona ‚Üí problema en Scanner App")
    print("   4. Si no funciona ‚Üí problema de red Android")

def main():
    """Funci√≥n principal"""
    print("üì± DIAGN√ìSTICO: Scanner App con permisos corregidos")
    print("   Problema: rep_network_error persiste despu√©s de recompilaci√≥n")
    print()
    
    server_working = test_from_android_perspective()
    
    analyze_possible_causes()
    provide_immediate_solutions()
    
    print(f"\n" + "=" * 60)
    print("üìã CONCLUSI√ìN:")
    if server_working:
        print("‚úÖ Servidor funciona ‚Üí Problema en Scanner App")
        print("üîß Revisar URL, configuraci√≥n y logs de Android")
    else:
        print("‚ö†Ô∏è Hay problemas de conectividad espec√≠ficos")
        print("üîß Verificar configuraci√≥n de red y permisos")
    print("=" * 60)

if __name__ == "__main__":
    main()